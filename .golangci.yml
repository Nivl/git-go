run:
  deadline: 10m

issues:
  max-same-issues: 0
  max-per-linter: 0
  exclude-use-default: false

  exclude-rules:
    - linters:
        - govet
      text: 'shadow: declaration of "err"'

    # we remove a few annoying things from our tests, because they
    # don't provide much beside complexity
    - path: _test\.go
      linters:
        - errcheck
        - gosec
        - goerr113
        - forcetypeassert

    - path: _test\.go
      text: "fieldalignment: struct"

    # No need to check for non-wrapped errors in cmd/ since most
    # command might return inline errors
    - path: cmd/
      linters:
        - goerr113
      text: "do not define dynamic errors"

linters:
  enable-all: true
  disable:
    - cyclop # checks function and package cyclomatic complexity
    - depguard # Go linter that checks if package imports are in a list of acceptable packages
    - dupl # Tool for code clone detection
    - exhaustivestruct # Checks if all struct's fields are initialized
    - funlen # Tool for detection of long functions
    - gci # Gci control golang package import order and make it always deterministic
    - gochecknoglobals # check that no global variables exist
    - gocognit # Computes and checks the cognitive complexity of functions
    - goconst # Finds repeated strings that could be replaced by a constant
    - gocyclo # Computes and checks the cyclomatic complexity of functions
    - godot # Check if comments end in a period
    - godox # Tool for detection of FIXME, TODO and other comment keywords
    - gofmt # Replaced by gofumpt
    - goheader # Checks is file header matches to pattern
    - golint # Replaced by revive
    - gomnd # An analyzer to detect magic numbers
    - gomoddirectives # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod
    - gomodguard # Allow and block list linter for direct Go module dependencies
    - ifshort # Checks that your code uses short syntax for if-statements whenever possible
    - importas # Enforces consistent import aliases
    - interfacer  # No longer maintained, project archived on github
    - lll  # Reports long lines
    - makezero  # Finds slice declarations with non-zero initial length
    - maligned  # Replaced by govet 'fieldalignment'
    - nakedret  # Finds naked returns in functions greater than a specified function length
    - nestif  # Reports deeply nested if statements
    - nlreturn # checks for a new line before return and branch statements to increase code clarity
    - paralleltest # detects missing usage of t.Parallel() method in your Go test || Too many false positives https://github.com/kunwardeep/paralleltest/issues/8
    - predeclared # find code that shadows one of Go's predeclared identifiers
    - promlinter # Check Prometheus metrics naming via promlint
    - scopelint # Replaced by exportloopref
    - tagliatelle # Checks the struct tags
    - testpackage # linter that makes you use a separate _test package
    - thelper # detects golang test helpers without t.Helper() call and checks the consistency of test helpers
    - wastedassign # finds wasted assignment statements
    - wrapcheck # Checks that errors returned from external packages are wrapped
    - wsl # Forces you to use empty lines

linters-settings:
  govet:
    enable-all: true

  # for G306 and G301: https://github.com/golangci/golangci-lint/issues/177
  gosec:
    excludes:
      - G104 # this is a duplicate of errcheck
      - G304 # warns about file inclusion via variable. It basically blocks every `os.File(variable)`
      - G401 # warns about unsecure hash method. git requires the use of SHA1
      - G505 # warns about the use of SHA1. git works using SHA1
    config:
      G301: "0755" # git creates directories with the permission 0755, so this is what we're targeting for
      G306: "0644" # git creates files with the permission 0644, so this is what we're targeting for

  gocritic:
    enabled-tags:
      - performance
      - diagnostic
      - style
      - experimental
      - opinionated

    disabled-checks:
      - sloppyReassign # conflicts with no shadow
      - emptyFallthrough # we use fallthrough to force a case to go to default while being explicit
      - octalLiteral # we use raw octal everywhere
      - hugeParam # disabled because we pass Option objects by copy
